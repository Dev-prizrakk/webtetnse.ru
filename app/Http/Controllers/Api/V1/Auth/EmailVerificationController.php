<?php

namespace App\Http\Controllers\Api\V1\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;

class EmailVerificationController extends Controller
{
    // üì§ POST /api/v1/auth/email-verify/{user}
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    /**
     * @OA\Post(
     *     path="/api/v1/auth/email-verify/{user}",
     *     tags={"Authentication"},
     *     summary="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email",
     *     description="–°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
     *     @OA\Parameter(
     *         name="user",
     *         in="path",
     *         required=true,
     *         description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
     *         @OA\Schema(type="integer", example=1)
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
     *         @OA\JsonContent(
     *             @OA\Property(property="message", type="string", example="–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —Å–æ–∑–¥–∞–Ω–∞."),
     *             @OA\Property(property="verify_url", type="string", example="http://localhost/api/v1/auth/email-verify?user=1&token=abc123")
     *         )
     *     ),
     *     @OA\Response(response=400, description="Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"),
     *     @OA\Response(response=404, description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
     * )
     */

    public function sendLink(Request $request, User $user)
    {
        if ($user->email_verified_at) {
            return response()->json(['message' => 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω'], 400);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        $token = Str::random(64);

        DB::table('email_verifications')->updateOrInsert(
            ['user_id' => $user->id],
            [
                'token' => Hash::make($token),
                'created_at' => now(),
            ]
        );

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π.
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –æ—Ç–≤–µ—Ç–µ.
        $verifyUrl = url("/api/v1/auth/email-verify?user={$user->id}&token={$token}");

        return response()->json([
            'message' => '–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —Å–æ–∑–¥–∞–Ω–∞.',
            'verify_url' => $verifyUrl,
        ]);
    }

    // ‚úÖ POST /api/v1/auth/email-verify
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É
    /**
     * @OA\Post(
     *     path="/api/v1/auth/email-verify",
     *     tags={"Authentication"},
     *     summary="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –ø–æ —Ç–æ–∫–µ–Ω—É",
     *     description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             required={"user","token"},
     *             @OA\Property(property="user", type="integer", example=1, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
     *             @OA\Property(property="token", type="string", example="abc123", description="–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email")
     *         )
     *     ),
     *     @OA\Response(response=200, description="Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"),
     *     @OA\Response(response=400, description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω"),
     *     @OA\Response(response=404, description="–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"),
     *     @OA\Response(response=422, description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
     * )
     */

    public function verify(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user' => 'required|integer|exists:users,id',
            'token' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $record = DB::table('email_verifications')->where('user_id', $request->user)->first();

        if (!$record) {
            return response()->json(['error' => '–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω'], 404);
        }

        if (!Hash::check($request->token, $record->token)) {
            return response()->json(['error' => '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'], 400);
        }

        if (Carbon::parse($record->created_at)->addHours(2)->isPast()) {
            return response()->json(['error' => '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫'], 400);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::find($request->user);
        $user->email_verified_at = now();
        $user->save();

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        DB::table('email_verifications')->where('user_id', $user->id)->delete();

        return response()->json(['message' => 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω']);
    }
}
